{% set types = ['success', 'info', 'warning', 'danger'] %}
{% set icons = {
  'success': 'fa-check',
  'info': 'fa-circle-info',
  'warning': 'fa-triangle-exclamation',
  'danger': 'fa-circle-xmark'
} %}

<div id="toast-container" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1080;">
	{% for label, messages in app.flashes %}
		{% for message in messages %}
			<div class="toast align-items-center text-bg-{{ label }} border-0 mb-2" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
				<div class="d-flex">
					<div class="toast-body">
						<i class="toast-picto fa-solid fa-fw me-2 {{ icons[label]|default('fa-bell') }}"></i>
						<span class="toast-message">{{ message }}</span>
					</div>
					<button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
				</div>
			</div>
		{% endfor %}
	{% endfor %}
</div>

<script>
	// Exécuter immédiatement : PAS d'addEventListener
(function () {
const toastElements = document.querySelectorAll('#toast-container .toast');
for (const el of toastElements) {
bootstrap.Toast.getOrCreateInstance(el).show();
}

// Définir une fonction globale pour déclencher un toast JS si besoin
window.toastme = function (msg, color = 'info', picto = 'fa-circle-info') {
const container = document.getElementById('toast-container');
const template = document.getElementById('toast-template').firstElementChild;
const newToast = template.cloneNode(true);

newToast.classList.remove('text-bg-primary');
newToast.classList.add('text-bg-' + color);

newToast.querySelector('.toast-message').textContent = msg;
newToast.querySelector('.toast-picto').className = 'toast-picto fa-solid fa-fw me-2 ' + picto + ' text-white';

container.appendChild(newToast);
bootstrap.Toast.getOrCreateInstance(newToast).show();
};
})();
</script>
